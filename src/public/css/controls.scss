// Button
$defaultButtonTextColor: #333;
$defaultButtonColor: #fff;
$primaryButtonTextColor: #fff;
$primaryButtonColor: #2288ff;
$successButtonTextColor: #fff;
$successButtonColor: #33aa33;
$dangerButtonTextColor: #fff;
$dangerButtonColor: #bb3311;
$warningButtonColor: #ffcc00;

.btn {
    border: none;
    font-size: 16px;
    height: 59px;
    width: 120px;

    @media only screen and (max-width: $responsive) { 
        font-size: 14px;
        height: 39px;
        width: 100px;
    }

    &-primary {
        background: $primaryButtonColor;
        color: $primaryButtonTextColor;
    }
    
    &-success {
        background: $successButtonColor;
        color: $successButtonTextColor;
    }

    &-danger {
        background: $dangerButtonColor;
        color: $dangerButtonTextColor;
    }

    &-cancel, &-close {
        background: $defaultButtonColor;
        color: $defaultButtonTextColor;
    }
}


// Form Control
$formErrorColor: $dangerButtonColor;
$formErrorTextColor: #fff;
$formInputTextColor: #333;

.form-control {    
    &-label {
        margin-bottom: 5px;
    }

    &-text-area {
        resize: none;
        font-size: 18px;
        height: 80px;
        color: $formInputTextColor;
    }

    &-input {
        padding-left: 10px;
        width: 100%;
        height: 39px;
        font-size: 18px;
        color: $formInputTextColor;
    }

    &-error {
        background: $formErrorColor;
        padding: 5px;
        font-size: 12px;
        color: $formErrorTextColor;
    }
}

$radioButtonSelectColor: lighten(#ffcc00, 25);

// Radio Button
.radio-group {
    list-style: none;
    & > li {
        position: relative;
        font-size: 24px;
    }

    // Hide the radio button
    & input[type=radio] {
        display: none;
    }

    // Find the span sibling and change it's style.
    & input[type=radio] + span {
        display: block;
        min-height: 25px;
        padding: 10px 0 10px 50px;
    }

    // By defining the hover first, we
    // make the checked have precedence.
    & input[type=radio]:hover + span {
        color: #666;
    }

    // + means look for the sibling
    // In this case look for the sibling label for the
    // checked radio button. Make it selected color when
    // we click the radio button.
    & input[type=radio]:checked + span {
        color: $radioButtonSelectColor;
    }

    // ~ looks for the sibling with the class
    & input[type=radio] ~ .radio-base-circle {
        position: absolute;
        left: 0;
        top: 50%;
        transform: translate(0, -50%);
        width: 28px;
        height: 28px;
        border: 2px solid #fff;
        border-radius: 50%;
    }

    & input[type=radio]:checked ~ .radio-base-circle {
        border: 2px solid $radioButtonSelectColor;
    }

    & input[type=radio]:checked ~ .radio-base-circle > .radio-filled-circle {
        position: absolute;
        left: 50%;
        top: 50%;
        transform: translate(-50%, -50%);
        width: 16px;
        height: 16px;
        border-radius: 50%;
        background: $radioButtonSelectColor;
    }    
}


// Spinner
$spinnerBorderPixelWidth: 5px;
$spinnerBorderType: solid;
$spinnerWidthAndHeight: 50px;
$spinnerAnimationDuration: 1s;

.spinner {
    border: $spinnerBorderPixelWidth $spinnerBorderType #fff;
    border-left-color: transparent;
    border-right-color: transparent;
    border-radius: 50%;
    width: $spinnerWidthAndHeight;
    height: $spinnerWidthAndHeight;
    animation-name: spin;
    animation-duration: $spinnerAnimationDuration;
    animation-iteration-count: infinite;
    animation-timing-function: linear;

    &-primary {
        @extend .spinner;
        border: $spinnerBorderPixelWidth $spinnerBorderType $primaryButtonColor; 
        border-left-color: transparent;
        border-right-color: transparent;
    }
    &-danger { 
        @extend .spinner;
        border: $spinnerBorderPixelWidth $spinnerBorderType $dangerButtonColor; 
        border-left-color: transparent;
        border-right-color: transparent;
    }
    // &-warning {
    //     @extend .spinner;
    //     border: $spinnerBorderPixelWidth $spinnerBorderType $warningButtonColor; 
    //     border-left-color: transparent;
    //     border-right-color: transparent;
    // }
    &-success { 
        @extend .spinner;
        border: $spinnerBorderPixelWidth $spinnerBorderType $successButtonColor; 
        border-left-color: transparent;
        border-right-color: transparent;
    }
}

@keyframes spin {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
}